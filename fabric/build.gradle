plugins {
    id 'fabric-loom' version "${loom_version}"
}

loom {
    runConfigs.configureEach { ideConfigGenerated = true }
}

repositories {
    maven { url = "https://maven.terraformersmc.com/" }
}

// SÃ©lection dynamique des versions
def yarn_version = project.properties["yarn_mappings_${rootProject.minecraft_version}"]
def fabric_api_version = project.properties["fabric_api_version_${rootProject.minecraft_version}"]
def mod_menu_version = project.properties["mod_menu_version_${rootProject.minecraft_version}"]

dependencies {
    minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
    mappings "net.fabricmc:yarn:${yarn_version}:v2"
    modImplementation "maven.modrinth:minecraft-transit-railway:FABRIC-${rootProject.mtr_version}+${rootProject.minecraft_version}"
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"
    modApi "com.terraformersmc:modmenu:${mod_menu_version}"

    implementation 'org.slf4j:slf4j-api:1.7.28'
    implementation 'org.slf4j:slf4j-simple:1.7.28'

    annotationProcessor "systems.manifold:manifold-preprocessor:${manifold_preprocessor}"
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = java_version as Integer

    it.options.compilerArgs.removeIf { arg ->
        arg.startsWith("-Xplugin:Manifold") ||
        arg.startsWith("-AMC_VERSION") ||
        arg.startsWith("-ALOADER")
    }
}

configurations.configureEach {
    resolutionStrategy {
        force("net.fabricmc:fabric-loader:$project.fabric_loader_version")
    }
}

java {
    withSourcesJar()

    def javaVersion = JavaVersion.toVersion(java_version)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

jar {
    from("LICENSE") {
        rename { "${it}_${base.archivesName.get()}"}
    }
}

remapJar {
    dependsOn(shadowJar)
    mustRunAfter(shadowJar)
    inputFile = file(shadowJar.archivePath)
}

// Copie le JAR final
tasks.register("moveBuild") {
    doLast {
        delete fileTree("../build").matching {
            include "**/*fabric*"
        }
        copy {
            from "build/libs/MTRFranceAddon-fabric-${version}.jar"
            into "../build"
            rename { fileName -> fileName }
        }
    }
}

afterEvaluate {
    for (def task in it.tasks) {
        if (task == tasks.build) {
            task.finalizedBy tasks.moveBuild
        }
    }
}

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven { url "https://jitpack.io" }
}